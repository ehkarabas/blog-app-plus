{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Blog API",
    "description": "Blog App",
    "contact": {
      "name": "Huseyin Karabas",
      "email": "ehkarabas@gmail.com",
      "url": "https://portfolio-ehkarabas.netlify.app/"
    },
    "license": {
      "name": "ISC"
    }
  },
  "host": "blog-api-plus-ehkarabas.onrender.com:443",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "ClassicToken": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Enter your Token (Token key) to login. Example: <b>Token <i>...tokenKey...</i></b>. You need to choose either Token key auth or JWT auth."
    },
    "JWTAccess": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Enter your AccessToken (JWT) to login. Example: <b>Bearer <i>...accessToken...</i></b>. You need to choose either Token key auth or JWT auth."
    },
    "JWTRefresh": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Refresh-Token",
      "description": "Enter your RefreshToken (JWT) to renew your access token. Example: <b>...refreshToken...</b>"
    }
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login <Permissions: Public>",
        "description": "Login with username (or email) and password for get classicToken and JWT",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "admin"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer1234!"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/refresh_browsers": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT: Refresh - Cookie <Permissions: Public>",
        "description": "Refresh access token via cookie.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/refresh_others": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT: Refresh - API <Permissions: Public>",
        "description": "Refresh access token via refresh token. You need to set your refresh token to X-Refresh-Token header to refresh your access token.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Classic Token Logout <Permissions: Public>",
        "description": "Delete token key.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Single User <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testedit"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer4321!"
                },
                "email": {
                  "type": "string",
                  "example": "testedit@site.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "testedit"
                },
                "lastName": {
                  "type": "string",
                  "example": "testedit"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testedit"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer4321!"
                },
                "email": {
                  "type": "string",
                  "example": "testedit@site.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "testedit"
                },
                "lastName": {
                  "type": "string",
                  "example": "testedit"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users <Permissions: Admin | Own>",
        "description": "\r  You can send query with endpoint for filter[], search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create User <Permissions: Public>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer1234!"
                },
                "email": {
                  "type": "string",
                  "example": "test@site.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "test"
                },
                "lastName": {
                  "type": "string",
                  "example": "test"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/likes/{likeId}": {
      "get": {
        "tags": [
          "Likes"
        ],
        "summary": "Get Single Like <Permissions: Public>",
        "description": "",
        "parameters": [
          {
            "name": "likeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Likes"
        ],
        "summary": "Update Like <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "likeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f001"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Likes"
        ],
        "summary": "Delete Like <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "likeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Likes"
        ],
        "summary": "Update Like <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "likeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f001"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/likes/": {
      "get": {
        "tags": [
          "Likes"
        ],
        "summary": "List Likes <Permissions: Public>",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Likes"
        ],
        "summary": "Create Like <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f001"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/categories/{categoryId}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get Single Category <Permissions: Public>",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update Category <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "CategoryUP"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete Category <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Categories"
        ],
        "summary": "Update Category <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "CategoryUP"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "List Categories <Permissions: Public>",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create Category <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Category1"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/comments/create/{blogId}": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create Comment <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f700"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                },
                "content": {
                  "type": "string",
                  "example": "Comment1"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/comments/{commentId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get Single Comment <Permissions: Public>",
        "description": "",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update Comment <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f700"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                },
                "content": {
                  "type": "string",
                  "example": "CommentUP"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete Comment <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "summary": "Update Comment <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f700"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                },
                "content": {
                  "type": "string",
                  "example": "CommentUP"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/comments/": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "List Comments <Permissions: Public>",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create Comment <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f700"
                },
                "blogId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f201"
                },
                "content": {
                  "type": "string",
                  "example": "Comment1"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/blogs/{blogId}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get Single Blog <Permissions: Login>",
        "description": "",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Blogs"
        ],
        "summary": "Update Blog <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f003"
                },
                "categoryId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f106"
                },
                "title": {
                  "type": "string",
                  "example": "Sample Travel Blog - TestUP"
                },
                "content": {
                  "type": "string",
                  "example": "UPLorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam eligendi, aliquam sequi fuga velit aperiam aut optio ipsam et inventore fugiat consequatur, provident debitis amet harum recusandae, minus incidunt sint assumenda repellat adipisci enim! Unde provident a necessitatibus quia sunt. Aut porro doloremque facilis, exercitationem, dicta veniam tempore commodi totam dolorem laudantium quas. Neque libero dicta quasi accusantium amet doloribus, repellendus alias quidem praesentium itaque consequuntur culpa sunt ab eum hic labore perspiciatis a ex illum velit. Explicabo praesentium nemo eum, quos fugit ipsam enim asperiores animi magnam totam, sit vitae autem voluptatibus molestiae voluptate culpa, reprehenderit natus quidem earum?"
                },
                "image": {
                  "type": "string",
                  "example": "https://st3.depositphotos.com/3591429/14150/i/450/depositphotos_141509322-stock-photo-multiracial-people-with-digital-devices.jpg"
                },
                "status": {
                  "type": "string",
                  "example": "Published"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Blogs"
        ],
        "summary": "Delete Blog <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Blogs"
        ],
        "summary": "Update Blog <Permissions: Admin | Own>",
        "description": "",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f003"
                },
                "categoryId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f106"
                },
                "title": {
                  "type": "string",
                  "example": "Sample Travel Blog - TestUP"
                },
                "content": {
                  "type": "string",
                  "example": "UPLorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam eligendi, aliquam sequi fuga velit aperiam aut optio ipsam et inventore fugiat consequatur, provident debitis amet harum recusandae, minus incidunt sint assumenda repellat adipisci enim! Unde provident a necessitatibus quia sunt. Aut porro doloremque facilis, exercitationem, dicta veniam tempore commodi totam dolorem laudantium quas. Neque libero dicta quasi accusantium amet doloribus, repellendus alias quidem praesentium itaque consequuntur culpa sunt ab eum hic labore perspiciatis a ex illum velit. Explicabo praesentium nemo eum, quos fugit ipsam enim asperiores animi magnam totam, sit vitae autem voluptatibus molestiae voluptate culpa, reprehenderit natus quidem earum?"
                },
                "image": {
                  "type": "string",
                  "example": "https://st3.depositphotos.com/3591429/14150/i/450/depositphotos_141509322-stock-photo-multiracial-people-with-digital-devices.jpg"
                },
                "status": {
                  "type": "string",
                  "example": "Published"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/blogs/": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "List Blogs <Permissions: Public>",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Create Blog <Permissions: Login>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f003"
                },
                "categoryId": {
                  "type": "string",
                  "example": "65343222b67e9681f937f106"
                },
                "title": {
                  "type": "string",
                  "example": "Sample Travel Blog - Test"
                },
                "content": {
                  "type": "string",
                  "example": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam eligendi, aliquam sequi fuga velit aperiam aut optio ipsam et inventore fugiat consequatur, provident debitis amet harum recusandae, minus incidunt sint assumenda repellat adipisci enim! Unde provident a necessitatibus quia sunt. Aut porro doloremque facilis, exercitationem, dicta veniam tempore commodi totam dolorem laudantium quas. Neque libero dicta quasi accusantium amet doloribus, repellendus alias quidem praesentium itaque consequuntur culpa sunt ab eum hic labore perspiciatis a ex illum velit. Explicabo praesentium nemo eum, quos fugit ipsam enim asperiores animi magnam totam, sit vitae autem voluptatibus molestiae voluptate culpa, reprehenderit natus quidem earum?"
                },
                "image": {
                  "type": "string",
                  "example": "https://st3.depositphotos.com/3591429/14150/i/450/depositphotos_141509322-stock-photo-multiracial-people-with-digital-devices.jpg"
                },
                "status": {
                  "type": "string",
                  "example": "Published"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    }
  },
  "definitions": {
    "/auth/login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "/auth/refresh_others": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "description": {
              "type": "string",
              "example": "To refresh your access token on the API, set your refresh token in the 'X-Refresh-Token' header using the format '...refreshToken...'."
            }
          }
        }
      }
    },
    "/auth/refresh_browsers": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "description": {
              "type": "string",
              "example": "Just send a GET request to refresh your access token on browsers."
            }
          }
        }
      }
    },
    "/auth/logout": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "description": {
              "type": "string",
              "example": "To ensure your security when logging out, place your token in the 'Authorization' header with the format 'Token ...tokenKey...'. This procedure will effectively destroy the token."
            }
          }
        }
      }
    },
    "Blog": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "categoryId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Category"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Title length must be equal or more than 4 or equal or less than 100."
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Content length must be equal or more than 4 or equal or less than 2000."
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "default": {
              "type": "string",
              "example": "https://media.licdn.com/dms/image/D4E12AQFMiQNhbuldYQ/article-cover_image-shrink_600_2000/0/1694906949741?e=2147483647&v=beta&t=P-OJ3JelvBjCiq-g6DJ8Tw6qJad6vD5fjLIqk8Lk6VY"
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": [
                "d",
                "p",
                "D",
                "P",
                "Draft",
                "Published",
                "draft",
                "published"
              ],
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "string",
              "example": "Draft"
            },
            "set": {
              "type": "function"
            },
            "transform": {
              "type": "function"
            }
          }
        },
        "visitors": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "function"
            }
          }
        },
        "publish_date": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        },
        "updated_publish_date": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        },
        "destroyTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "name": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "set": {
              "type": "function"
            }
          }
        },
        "destroyTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "blogId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Blog"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "editedAt": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        },
        "destroyTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        }
      }
    },
    "Like": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "blogId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Blog"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "destroyTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "set": {
              "type": "function"
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Password must contain at least 1 uppercase & lowercase letter, 1 digit, 1 special character and must be between 8 and 16 characters in total."
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "Email field must be required"
              ],
              "items": {
                "type": "string"
              }
            },
            "unique": {
              "type": "array",
              "example": [
                true,
                "There is this email. Email field must be unique"
              ],
              "items": {
                "type": "string"
              }
            },
            "validate": {
              "type": "array",
              "example": [
                null
              ],
              "items": {
                "type": "function"
              }
            }
          }
        },
        "firstName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "lastName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "default": {
              "type": "string",
              "example": "https://cdn-icons-png.freepik.com/256/1077/1077114.png?semt=ais_hybrid"
            }
          }
        },
        "bio": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "default": {
              "type": "string",
              "example": ""
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isStaff": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "destroyTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {},
            "set": {
              "type": "function"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "ClassicToken": []
    },
    {
      "JWTAccess": []
    },
    {
      "JWTRefresh": []
    }
  ]
}